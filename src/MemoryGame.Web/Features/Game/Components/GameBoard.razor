<div class="game-board">
    @if(Board is null)
    {
        <LoadingSpinner />
    }
    else
    {
        @foreach (var card in Board.Cards)
        {
            <GameCard Card="card" OnCardSelected="CardSelected" />
        }
    }
</div>

@code {
    [Parameter] public Board? Board { get; set; }
    [Parameter] public EventCallback<Card> OnCardSelected { get; set; }

    // private CardModel? FirstCard { get; set; }
    // private CardModel? SecondCard { get; set; }

    // private int Moves { get; set; } = 0;

    // private bool IsGameOver = false;

    // private bool IsMatching = false;

    private async Task CardSelected(Card card)
    {
        if (OnCardSelected.HasDelegate)
        {
            await OnCardSelected.InvokeAsync(card);
        }

        // if (IsMatching || card.IsMatched || card.IsSelected)
        // {
        //     return;
        // }

        // card.SelectCard();

        // if (FirstCard is null)
        // {
        //     FirstCard = card;
        //     return;
        // }

        // SecondCard = card;

        // Moves++;

        // IsMatching = true;
        // await Task.Delay(1000);

        // bool isMatch = CheckForMatch(FirstCard, SecondCard);

        // if (isMatch)
        // {
        //     FirstCard.MatchCard();
        //     SecondCard.MatchCard();
        // }
        // else
        // {
        //     FirstCard.SelectCard();
        //     SecondCard.SelectCard();
        // }

        // FirstCard = null;
        // SecondCard = null;

        // IsGameOver = CheckForGameOver(Board!.Cards);

        // IsMatching = false;
    }

    // private static bool CheckForMatch(CardModel first, CardModel second)
    // {
    //     return first.Id == second.Id;
    // }

    // private static bool CheckForGameOver(List<CardModel> cards)
    // {
    //     return cards.All(x => x.IsMatched);
    // }
}
