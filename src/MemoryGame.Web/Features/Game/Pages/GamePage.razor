@page "/game/{DifficultyString}"
@rendermode InteractiveServer
@inject StartGameHandler StartGameHandler
@inject MatchCardsHandler MatchCardsHandler
@inject FinishGameHandler FinishGameHandler
@inject SaveScoreHandler SaveScoreHandler
@inject NavigationManager NavigationManager

<PageTitle>Memory Game - Play</PageTitle>

@if (Board is null)
{
    <LoadingSpinner />
}
else
{
    @if (!IsGameOver)
    {
        <div>
            <h3>Difficulty: @Difficulty</h3>
            <p>Time Elapsed: @ElapsedTime.Seconds</p>
            <p>Moves: @Moves</p>
        </div>
        <GameBoard Board="Board" OnCardSelected="CardSelected" />
    }
    else
    {
        <div>
            <h2>Game Over!</h2>
            <p>Time Taken: @ElapsedTime.Seconds</p>
            <p>Total Moves: @Moves</p>
            <p>Final Score: @Score</p>
            <p>Enter your username to save your score:</p>
            <input @bind="Username" />
            <button @onclick="SaveScore">Save Score</button>
        </div>
    }
}

@code {
    [Parameter] public string DifficultyString { get; set; } = string.Empty;

    private GameDifficulty Difficulty { get; set; } = GameDifficulty.Normal;
    private Board? Board;
    private DateTime StartedTime;
    private TimeSpan ElapsedTime;
    private int Moves = 0;
    private bool IsMatching = false;
    private bool IsGameOver = false;
    private string Username = string.Empty;

    private System.Timers.Timer? Timer;

    private int Score = 0;

    protected override async Task OnInitializedAsync()
    {
        Difficulty = SetGameDifficulty(DifficultyString);

        await StartGame();
    }

    private async Task StartGame()
    {
        var request = new StartGameRequest { Difficulty = Difficulty };
        var response = await StartGameHandler.Handle(request);

        Board = response.Board;
        StartedTime = response.StartedTime;

        Timer = new System.Timers.Timer(500);
        Timer.Elapsed += (s, e) => InvokeAsync(UpdateTime);
        Timer.Start();
    }

    private async Task FinishGame()
    {
        Timer?.Stop();
        IsGameOver = true;

        var request = new FinishGameRequest { Difficulty = Difficulty, ElapsedTime = ElapsedTime, Moves = Moves };
        var response = await FinishGameHandler.Handle(request);

        Score = response.Score;
    }

    private async Task CardSelected(Card card)
    {
        if (IsMatching)
        {
            return;
        }

        card.SelectCard();

        if (Board!.Cards.Count(c => c.IsSelected) == 2)
        {
            Moves++;
            IsMatching = true;
            await Task.Delay(1000);

            var firstCard = Board.Cards.First(c => c.IsSelected);
            var secondCard = Board.Cards.Last(c => c.IsSelected);

            var request = new MatchCardsRequest
                {
                    FirstCardId = firstCard.Id,
                    SecondCardId = secondCard.Id,
                };

            var response = await MatchCardsHandler.Handle(request);

            if (response.IsMatch)
            {
                firstCard.MatchCard();
                secondCard.MatchCard();
            }
            else
            {
                firstCard.SelectCard();
                secondCard.SelectCard();
            }

            if (Board.Cards.All(c => c.IsMatched))
            {
                await FinishGame();
            }

            IsMatching = false;
        }
    }

    private async Task SaveScore()
    {
        var request = new SaveScoreRequest
        {
            Username = Username,
            ElapsedTime = ElapsedTime,
            Moves = Moves,
            Difficulty = Difficulty,
        };

        var response = await SaveScoreHandler.Handle(request);

        Score = response.Score;

        // NavigationManager.NavigateTo("/high-scores");
    }

    private GameDifficulty SetGameDifficulty(string value)
    {
        return value.ToLower() switch
        {
            "easy" => GameDifficulty.Easy,
            "hard" => GameDifficulty.Hard,
            _ => GameDifficulty.Normal
        };
    }

    private void UpdateTime()
    {
        ElapsedTime = DateTime.UtcNow - StartedTime;
        StateHasChanged();
    }
}
